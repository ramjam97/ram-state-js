/*!
 * RamStateJs JavaScript Library v1.3.0
 * https://github.com/ramjam97/ram-state-js
 * Date: 2024-08-05
 */ class RamState{#a;#b;#c;#d;#e;constructor(t){this.#d=this.#f(t),this.#a=this.#f(t),this.#e=[],this.#b=[],this.#c=0}set(t){let e=this.#a,i="function"==typeof t?t(this.#f(e)):t,n=!this.#g(e,i);n&&(this.#c+=1,this.#a=this.#f(i)),this.#h(n,i,e,this.#c),n&&this.#i(i,e,this.#c)}get(){return this.#f(this.#a)}get value(){return this.get()}get current(){return this.get()}get version(){return this.#c}uponSet(t,e=!1){if("function"==typeof t){if(this.#e.push(t),e)try{t({hasChange:!this.#g(this.#a,this.#d),current:this.#a,previous:this.#d,version:this.#c})}catch(i){console.error("Error in initial uponSet callback:",i)}}else console.warn("Callback provided to uponSet is not a function")}watch(t,e=!1){return this.uponSet(t,e)}uponChange(t,e=!1){if("function"==typeof t){if(this.#b.push(t),e)try{t({current:this.#a,previous:this.#d,version:this.#c})}catch(i){console.error("Error in initial uponChange callback:",i)}}else console.warn("Callback provided to uponChange is not a function")}watchChange(t,e=!1){return this.uponChange(t,e)}watchChanges(t,e=!1){return this.uponChange(t,e)}reset(t=null){let e=this.#a;t=null===t?this.#f(this.#d):this.#f(t);let i=!this.#g(e,t);i&&(this.#c+=1),this.#a=t,this.#h(i,t,e,this.#c),i&&this.#i(t,e,this.#c)}#h(t,e,i,n){this.#e.forEach(s=>{try{s({hasChange:t,current:e,previous:i,version:n})}catch(r){console.error("Error in uponSet callback:",r)}})}#i(s,r,a){this.#b.forEach(t=>{try{t({current:s,previous:r,version:a})}catch(e){console.error("Error in uponChange callback:",e)}})}#g(h,o){if(h instanceof Set&&o instanceof Set)return h.size===o.size&&[...h].every(t=>o.has(t));if(h instanceof Map&&o instanceof Map){if(h.size!==o.size)return!1;for(let[u,f]of h)if(!o.has(u)||!this.#g(f,o.get(u)))return!1;return!0}return JSON.stringify(h)===JSON.stringify(o)}#f(c,l=new WeakMap){if(Object(c)!==c)return c;if(c instanceof Date)return new Date(c);if(c instanceof RegExp)return RegExp(c);if(c instanceof Set)return new Set([...c].map(t=>this.#f(t,l)));if(c instanceof Map)return new Map([...c].map(([t,e])=>[this.#f(t,l),this.#f(e,l)]));if(l.has(c))return l.get(c);let p=Array.isArray(c)?[]:Object.create(Object.getPrototypeOf(c));return l.set(c,p),Object.assign(p,...Object.keys(c).map(t=>({[t]:this.#f(c[t],l)})))}}