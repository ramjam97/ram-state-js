/*!
 * RamStateJs v2.2.0
 * Description: RamStateJs is a lightweight state management library for vanilla JavaScript. It provides a simple API to manage local and global state with watchers, effects, and DOM binding, inspired by Reactâ€™s useState and useEffect.
 * Author: Ram Jam
 * GitHub: https://github.com/ramjam97/ram-state-js
 */
function RamState(n={}){const e=new Set,t=[],a=(n,e)=>{if(n===e)return!0;if(typeof n!=typeof e)return!1;if(Array.isArray(n)&&Array.isArray(e))return n.length===e.length&&n.every((n,t)=>a(n,e[t]));if(n&&e&&"object"==typeof n){const t=Object.keys(n),l=Object.keys(e);return t.length===l.length&&t.every(t=>a(n[t],e[t]))}return!1},l=(n,e)=>{try{const t=e?n(e):n();return"function"==typeof t?t:null}catch(n){return console.error("RamState callback error:",n),null}},c=n=>{try{n()}catch(n){console.error("RamState cleanup error:",n)}};return(n.debug??1)&&console.log("RamState v2.2.0 initialized ğŸš€"),{useState:function(n,o=null){let u=n;const i={always:[],onChange:[]},r=o?document.querySelector(o):null;r&&(h(r,u),r.addEventListener("input",()=>{d(p(r))}),r.addEventListener("change",()=>{d(p(r))}));const s=n=>({dom:r,data:u,hasChange:n}),f=()=>({dom:r,data:u});function d(n){"function"==typeof n&&(n=n(u));const e=!a(u,n);return u=n,r&&h(r,u),i.always.forEach(n=>{"function"==typeof n.cleanup&&c(n.cleanup),n.cleanup=l(n.cb,s(e))}),e&&i.onChange.forEach(n=>{"function"==typeof n.cleanup&&c(n.cleanup),n.cleanup=l(n.cb,f())}),t.forEach(({run:n,deps:t})=>{(null===t||e&&t.length>0&&t.includes(g))&&n()}),u}function p(n){return n instanceof HTMLInputElement?"checkbox"===n.type?n.checked:n.value:n instanceof HTMLSelectElement?n.multiple?[...n.selectedOptions].map(n=>n.value):n.value:n instanceof HTMLTextAreaElement?n.value:null}function h(n,e){n instanceof HTMLInputElement?"checkbox"===n.type?n.checked=!!e:n.value=e??"":n instanceof HTMLSelectElement?n.multiple&&Array.isArray(e)?[...n.options].forEach(n=>{n.selected=e.includes(n.value)}):n.value=e??"":n instanceof HTMLTextAreaElement&&(n.value=e??"")}const g={dom:r,get:()=>u,set:d,watch:function(n,e=!1){if("function"!=typeof n)return void console.warn("watch callback must be a function");const t={cb:n,cleanup:null};i.always.push(t),e&&(t.cleanup=l(n,s(!1)))},watchEffect:function(n,e=!1){if("function"!=typeof n)return void console.warn("watchEffect callback must be a function");const t={cb:n,cleanup:null};i.onChange.push(t),e&&(t.cleanup=l(n,f()))}};return e.add(g),g},useEffect:function(n,e=null){if("function"!=typeof n)return void console.warn("useEffect callback must be a function");let a;function o(){"function"==typeof a&&c(a),a=l(n)}const u={run:o,deps:e};t.push(u),o()},useButton:function(n,o={}){const u={state:{disabled:o?.state?.disabled??!1,loading:o?.state?.loading??!1},loading:{html:o?.loading?.html??"",icon:o?.loading?.icon??""}},i=[...n instanceof HTMLElement?[n]:"string"==typeof n?Array.from(document.querySelectorAll(n)):[]].map(n=>({el:n,defaultHtml:n.innerHTML,loadingHtml:u.loading.html||n.innerHTML,loadingIcon:u.loading.icon}));let r={disabled:u.state.disabled,loading:u.state.loading};const s={always:[],onChange:[]},f=n=>({dom:i,state:r,hasChange:n}),d=()=>({dom:i,state:r}),p=n=>{i.forEach(e=>{const{el:t,defaultHtml:a,loadingHtml:l,loadingIcon:c}=e;t.disabled=n.disabled||n.loading,t.classList.toggle("loading",n.loading),t.classList.toggle("disabled",n.disabled),t.innerHTML=(n.loading?l:a)+(n.loading?c:"")})};function h(n){const e=!a(r,n);return r=n,p(r),s.always.forEach(n=>{"function"==typeof n.cleanup&&c(n.cleanup),n.cleanup=l(n.cb,f(e))}),e&&s.onChange.forEach(n=>{"function"==typeof n.cleanup&&c(n.cleanup),n.cleanup=l(n.cb,d())}),t.forEach(({run:n,deps:t})=>{(null===t||e&&t.length>0&&t.includes(g))&&n()}),r}const g={dom:i,get:()=>r,disabled:(n=!0)=>h({...r,disabled:n}),loading:(n=!0)=>h({...r,loading:n,disabled:n}),watch:function(n,e=!1){if("function"!=typeof n)return void console.warn("watch callback must be a function");const t={cb:n,cleanup:null};return s.always.push(t),e&&(t.cleanup=l(n,f(!1))),()=>{t.cleanup&&c(t.cleanup),s.always=s.always.filter(n=>n!==t)}},watchEffect:function(n,e=!1){if("function"!=typeof n)return void console.warn("watchEffect callback must be a function");const t={cb:n,cleanup:null};return s.onChange.push(t),e&&(t.cleanup=l(n,d())),()=>{t.cleanup&&c(t.cleanup),s.onChange=s.onChange.filter(n=>n!==t)}}};return e.add(g),g}}}