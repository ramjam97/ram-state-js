/*!
 * RamStateJs JavaScript Library v1.5.1
 * https://github.com/ramjam97/ram-state-js
 * Date: 2024-08-05
 * 
 * A lightweight state management library for Vanilla JavaScript with deep cloning, change detection,
 * and subscription-based updates. Handles complex data types (Set/Map/Date/RegExp)
 * and circular references.
*/ class RamState{#a;#b;#c;#d;#e;constructor(t){if("function"==typeof t)throw Error("Initial state cannot be a function.");this.#d=this.#f(t),this.#a=this.#f(t),this.#e=[],this.#b=[],this.#c=0}set(t){let e=this.#a,i="function"==typeof t?t(this.#f(e)):t,s=this.#f(i),n=!this.#g(e,s);n&&(this.#c+=1,this.#a=s),this.#h(n,s,e,this.#c),n&&this.#i(s,e,this.#c)}get(){return this.#f(this.#a)}get value(){return this.get()}get current(){return this.get()}get version(){return this.#c}uponSet(t,e=!1){if("function"==typeof t){if(this.#e.push(t),e)try{t({hasChange:!this.#g(this.#a,this.#d),current:this.#a,previous:this.#d,version:this.#c})}catch(i){console.error("Error in initial uponSet callback:",i)}}else console.warn("Callback provided to uponSet is not a function")}watch(t,e=!1){return this.uponSet(t,e)}uponChange(t,e=!1){if("function"==typeof t){if(this.#b.push(t),e)try{t({current:this.#a,previous:this.#d,version:this.#c})}catch(i){console.error("Error in initial uponChange callback:",i)}}else console.warn("Callback provided to uponChange is not a function")}watchChange(t,e=!1){return this.uponChange(t,e)}watchChanges(t,e=!1){return this.uponChange(t,e)}triggerEffects(t=""){let e=!this.#g(this.#d,this.#a);if("string"==typeof t){if("set"===t.toLowerCase())return this.#h(e,this.#a,this.#d,this.#c);if("change"===t.toLowerCase())return this.#i(this.#a,this.#d,this.#c)}this.#h(e,this.#a,this.#d,this.#c),this.#i(this.#a,this.#d,this.#c)}triggerSetEffects(){this.triggerEffects("set")}triggerChangeEffects(){this.triggerEffects("change")}reset(t=null){let e=this.#a;t=null===t?this.#f(this.#d):this.#f(t);let i=!this.#g(e,t);i&&(this.#c+=1),this.#a=t,this.#h(i,t,e,this.#c),i&&this.#i(t,e,this.#c)}#h(t,e,i,s){this.#e.forEach(n=>{try{n({hasChange:t,current:e,previous:i,version:s})}catch(r){console.error("Error in uponSet callback:",r)}})}#i(n,r,a){this.#b.forEach(t=>{try{t({current:n,previous:r,version:a})}catch(e){console.error("Error in uponChange callback:",e)}})}#g(h,o){if(h===o)return!0;if(h instanceof Set&&o instanceof Set)return h.size===o.size&&[...h].every(t=>o.has(t));if(h instanceof Map&&o instanceof Map){if(h.size!==o.size)return!1;for(let[f,c]of h)if(!o.has(f)||!this.#g(c,o.get(f)))return!1;return!0}if(h instanceof Date&&o instanceof Date)return h.getTime()===o.getTime();if(h instanceof RegExp&&o instanceof RegExp)return h.toString()===o.toString();if("object"!=typeof h||"object"!=typeof o||null===h||null===o)return!1;let l=Object.keys(h),u=Object.keys(o);return l.length===u.length&&l.every(t=>u.includes(t)&&this.#g(h[t],o[t]))}#f(g,p=new WeakMap){if("object"!=typeof g||null===g)return g;if(p.has(g))return p.get(g);let C;if(g instanceof Date)C=new Date(g.getTime());else if(g instanceof RegExp)C=RegExp(g.source,g.flags);else if(g instanceof Set)C=new Set([...g].map(t=>this.#f(t,p)));else if(g instanceof Map)C=new Map([...g].map(([t,e])=>[this.#f(t,p),this.#f(e,p)]));else for(let E in C=Array.isArray(g)?[]:Object.create(Object.getPrototypeOf(g)),p.set(g,C),g)g.hasOwnProperty(E)&&(C[E]=this.#f(g[E],p));return C}}