/**
 * RamStateJs JavaScript Library v2.0.0
 * https://github.com/ramjam97/ram-state-js
 *
 * @returns {Object} An object with two methods: `useState` and `useEffect`.
 *                   `useState` is a function to create a new state instance
 *                   with an initial value. `useEffect` is a function to
 *                   execute a side effect function when the state changes.
 */
function RamState() { const t = new Set, n = []; const e = (t, n) => { if (t === n) return !0; if (typeof t != typeof n) return !1; if (Array.isArray(t) && Array.isArray(n)) return t.length === n.length && t.every(((t, a) => e(t, n[a]))); if (t && n && "object" == typeof t) { const a = Object.keys(t), c = Object.keys(n); return a.length === c.length && a.every((a => e(t[a], n[a]))) } return !1 }, a = (t, n) => { try { t(n) } catch (t) { console.error("RamState callback error:", t) } }; return console.log("RamState initialized ðŸš€"), { useState: function (c) { let o = c; const r = { always: [], onChange: [] }, f = { get: function () { return o }, set: function (t) { "function" == typeof t && (t = t(o)); const c = !e(o, t); return o = t, r.always.forEach((t => a(t, { data: o, hasChange: c }))), c && r.onChange.forEach((t => a(t, { data: o }))), n.forEach((({ run: t, deps: n }) => { (null === n || c && n.length > 0 && n.includes(f)) && t() })), o }, watch: function (t, n = !1) { "function" == typeof t ? (r.always.push(t), n && a(t, { data: o, hasChange: !1 })) : console.warn("watch callback must be a function") }, watchEffect: function (t, n = !1) { "function" == typeof t ? (r.onChange.push(t), n && a(t, { data: o })) : console.warn("watchEffect callback must be a function") } }; return t.add(f), f }, useEffect: function (t, e = null) { if ("function" != typeof t) return void console.warn("useEffect callback must be a function"); let a; function c() { if ("function" == typeof a) try { a() } catch (t) { console.error("RamState cleanup error:", t) } const n = t(); "function" == typeof n && (a = n) } const o = { run: c, deps: e }; n.push(o), c() } } }