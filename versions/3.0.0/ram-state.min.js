/*!
 * RamStateJs v3.0.0
 * Description: A vanilla JavaScript state management library inspired by Reactâ€™s useState, useEffect, and useMemo â€“ but without any framework. It helps you manage stateful data and DOM bindings easily with reactive watchers and side effects.
 * Author: Ram Jam
 * GitHub: https://github.com/ramjam97/ram-state-js
 * Build Date: 2025-10-03 17:53:59 (Asia/Manila)
 */
function RamState(){const e="v3.0.0",t=new Set,n=(()=>{let e=new Set,t=!1;const n=()=>{e.forEach(e=>e()),e.clear(),t=!1};return c=>{e.add(c),t||(t=!0,Promise.resolve().then(n))}})(),c=(e,t)=>{if(e===t)return!0;if(null==e||null==t||typeof e!=typeof t)return!1;if(Array.isArray(e)&&Array.isArray(t))return e.length===t.length&&e.every((e,n)=>c(e,t[n]));if("object"==typeof e){const n=Object.keys(e),o=Object.keys(t);return n.length===o.length&&n.every(n=>c(e[n],t[n]))}return!1},o=(e,t)=>{try{if("function"!=typeof e)return null;const n=void 0!==t?e(t):e();return"function"==typeof n?n:null}catch(e){return console.error("RamState execution error:",e),null}},a=e=>Array.isArray(e)?e:[e],r=(e,t)=>{if(e instanceof HTMLInputElement){if("checkbox"===e.type){const n=Boolean(t);return void(e.checked!==n&&(e.checked=n))}if("radio"===e.type){const n=e.value===String(t);return void(e.checked!==n&&(e.checked=n))}}if(e instanceof HTMLSelectElement&&e.multiple&&Array.isArray(t)){const n=new Set(t.map(String));return void[...e.options].forEach(e=>{const t=n.has(e.value);e.selected!==t&&(e.selected=t)})}const n=t??"";"value"in e&&e.value!==n&&(e.value=n),e instanceof HTMLInputElement||e instanceof HTMLTextAreaElement||e instanceof HTMLSelectElement||e.textContent!==n&&(e.textContent=n)};return console.log("%cRamState","color:cyan",e,"initialized ðŸš€"),{version:e,useState:function(e,n=null){let a=e;const u={onSet:[],onChange:[]},l=((e=null)=>e?e instanceof HTMLElement?[e]:"string"==typeof e?[...document.querySelectorAll(e)]:Array.isArray(e)?e.flatMap(e=>e instanceof HTMLElement?[e]:"string"==typeof e?[...document.querySelectorAll(e)]:[]):[]:[])(n);l.forEach(e=>{r(e,a),["input","change"].forEach(t=>e.addEventListener(t,()=>s.set((e=>e instanceof HTMLInputElement?"checkbox"===e.type?e.checked:"radio"===e.type?e.checked?e.value:null:e.value:e instanceof HTMLSelectElement?e.multiple?[...e.selectedOptions].map(e=>e.value):e.value:e instanceof HTMLTextAreaElement?e.value:null)(e))))});const f=e=>({dom:l,value:a,hasChange:e}),i=()=>({dom:l,value:a}),s={dom:l,get value(){return a},set(e){"function"==typeof e&&(e=e(a));const t=!c(a,e);return a=e,l.forEach(e=>r(e,a)),u.onSet.forEach(e=>{o(e.cleanup),e.cleanup=o(e.cb,f(t))}),t&&u.onChange.forEach(e=>{o(e.cleanup),e.cleanup=o(e.cb,i())}),a},watch(e){if("function"!=typeof e)return console.warn("watch callback must be a function");u.onSet.push({cb:e,cleanup:o(e,f(!1))})},watchEffect(e,t=!1){if("function"!=typeof e)return console.warn("watchEffect callback must be a function");const n={cb:e,cleanup:null};t&&(n.cleanup=o(e,i())),u.onChange.push(n)}};return t.add(s),s},useMemo:function(e,t=[]){if("function"!=typeof e)return console.warn("useMemo factory must be a function");let c,r=[];const u=()=>({value:c});function l(){return c=e(),r.forEach(e=>{o(e.cleanup),e.cleanup=o(e.cb,u())}),c}return a(t).forEach(e=>{("function"==typeof e.watchEffect?e.watchEffect:e.watch)?.(()=>n(l))}),l(),{get value(){return c},watch(e){if("function"!=typeof e)return console.warn("watch callback must be a function");r.push({cb:e,cleanup:o(e,u())})}}},useEffect:function(e,c=null){if("function"!=typeof e)return console.warn("useEffect callback must be a function");let r;function u(){o(r),r=o(e)}a(null===c?t:c).forEach(e=>{("function"==typeof e.watchEffect?e.watchEffect:e.watch)?.(()=>n(u))}),u()}}}