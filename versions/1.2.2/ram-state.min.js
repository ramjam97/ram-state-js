/*!
 * RamStateJs JavaScript Library v1.2.2
 * https://github.com/ramjam97/ram-state-js
 * Date: 2024-08-05
 */ class RamState{#a;#b;#c;#d;#e;constructor(t){this.#d=this.#f(t),this.#a=this.#f(t),this.#e=[],this.#b=[],this.#c=0}set(t){let e=this.#a,i="function"==typeof t?t(this.#f(e)):t,n=!this.#g(e,i);n&&(this.#c+=1,this.#a=this.#f(i)),this.#h(n,i,e,this.#c),n&&this.#i(i,e,this.#c)}get(){return this.#f(this.#a)}get value(){return this.#f(this.#a)}get version(){return this.#c}uponSet(t,e=!1){if("function"==typeof t){if(this.#e.push(t),e)try{t({hasChange:!this.#g(this.#a,this.#d),latest:this.#a,previous:this.#d,version:this.#c})}catch(i){console.error("Error in initial uponSet callback:",i)}}else console.warn("Callback provided to uponSet is not a function")}watch(t,e=!1){return this.uponSet(t,e)}uponChange(t,e=!1){if("function"==typeof t){if(this.#b.push(t),e)try{t({latest:this.#a,previous:this.#d,version:this.#c})}catch(i){console.error("Error in initial uponChange callback:",i)}}else console.warn("Callback provided to uponChange is not a function")}watchChange(t,e=!1){return this.uponChange(t,e)}watchChanges(t,e=!1){return this.uponChange(t,e)}reset(t=null){let e=this.#a;t=null===t?this.#f(this.#d):this.#f(t);let i=!this.#g(e,t);i&&(this.#c+=1),this.#a=t,this.#h(i,t,e,this.#c),i&&this.#i(t,e,this.#c)}#h(t,e,i,n){this.#e.forEach(s=>{try{s({hasChange:t,latest:e,previous:i,version:n})}catch(a){console.error("Error in uponSet callback:",a)}})}#i(s,a,r){this.#b.forEach(t=>{try{t({latest:s,previous:a,version:r})}catch(e){console.error("Error in uponChange callback:",e)}})}#g(o,h){if(o instanceof Set&&h instanceof Set)return o.size===h.size&&[...o].every(t=>h.has(t));if(o instanceof Map&&h instanceof Map){if(o.size!==h.size)return!1;for(let[f,u]of o)if(!h.has(f)||!this.#g(u,h.get(f)))return!1;return!0}return JSON.stringify(o)===JSON.stringify(h)}#f(l,c=new WeakMap){if(Object(l)!==l)return l;if(l instanceof Date)return new Date(l);if(l instanceof RegExp)return RegExp(l);if(l instanceof Set)return new Set([...l].map(t=>this.#f(t,c)));if(l instanceof Map)return new Map([...l].map(([t,e])=>[this.#f(t,c),this.#f(e,c)]));if(c.has(l))return c.get(l);let p=Array.isArray(l)?[]:Object.create(Object.getPrototypeOf(l));return c.set(l,p),Object.assign(p,...Object.keys(l).map(t=>({[t]:this.#f(l[t],c)})))}}